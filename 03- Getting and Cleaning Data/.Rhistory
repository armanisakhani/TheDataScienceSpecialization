y=Hitters$Salary
fit.ridge=glmnet(x,y,alpha=0)
plot(fit.ridge,xvar="lambda",label=TRUE)
cv.ridge=cv.glmnet(x,y,alpha=0)
plot(cv.ridge)
fit.lasso=glmnet(x,y)
plot(fit.lasso,xvar="lambda",label=TRUE)
cv.lasso=cv.glmnet(x,y)
plot(cv.lasso)
coef(cv.lasso)
lasso.tr=glmnet(x[train,],y[train])
train=sample(seq(263),180,replace=FALSE)
lasso.tr=glmnet(x[train,],y[train])
lasso.tr
pred=predict(lasso.tr,x[-train,])
dim(pred)
pred=predict(lasso.tr,x[-train,])
dim(pred)
dim(pred)
rmse= sqrt(apply((y[-train]-pred)^2,2,mean))
plot(log(lasso.tr$lambda),rmse,type="b",xlab="Log(lambda)")
plot(log(lasso.tr$lambda),rmse,type="b",xlab="Log(lambda)")
lam.best=lasso.tr$lambda[order(rmse)[1]]
lam.best=lasso.tr$lambda[order(rmse)[1]]
lam.best
coef(lasso.tr,s=lam.best)
rm(list=ls())
?rnorm
rnorm(1000 , 0 , 1)
rand = rnorm(1000 , 0 , 1)
randMatrix = Matrix(rnorm(900 , 0 , 1) ,c(30,30))
View(randMatrix)
randMatrix = Matrix(rnorm(900 , 0 , 1) ,c(30,30))
randMatrix
View(randMatrix)
view(randMatrix)
View(randMatrix)
View(as.dataframe(randMatrix))
View(as.datafram(randMatrix))
View(datafram2(randMatrix))
View(dataframe(randMatrix))
rnorm(900 , 0 , 1)
randMatrix = matrix(rnorm(900 , 0 , 1) ,c(30,30))
View(randMatrix)
View(randMatrix)
i = randi(30)
i = rndi(30)
i = sample(1:30 , 1)
j = sample(1:30 , 1)
i = sample(2:29 , 1)
j = sample(2:29 , 1)
randMatrix[i-1:i+1 , j-1:j+1] = randMatrix[i-1:i+1 , j-1:j+1] + matrix(rnorm(9 , 0 , 1) ,c(3,3))
randMatrix[i-1:i+1 , j-1:j+1]
j-1:j+1
randMatrix[(i-1):(i+1) , (j-1:j+1)]
randMatrix[(i-1):(i+1) , (j-1:j+1)] = randMatrix[i-1:i+1 , j-1:j+1] + matrix(rnorm(9 , 0 , 1) ,c(3,3))
randMatrix[(i-1):(i+1) , (j-1:j+1)] = randMatrix[(i-1):(i+1) , (j-1:j+1)]+ matrix(rnorm(9 , 0 , 1) ,c(3,3))
dim(randMatrix[(i-1):(i+1) , (j-1:j+1)])
randMatrix[(i-1):(i+1) , (j-1):(j+1)] = randMatrix[(i-1):(i+1) , (j-1):(j+1)]+ matrix(rnorm(9 , 0 , 1) ,c(3,3))
randMatrix = matrix(rnorm(900 , 0 , 1) ,c(30,30))
i = sample(2:29 , 1)
j = sample(2:29 , 1)
randMatrix[(i-1):(i+1) , (j-1):(j+1)] = randMatrix[(i-1):(i+1) , (j-1):(j+1)]+ matrix(rnorm(9 , 2 , 1) ,c(3,3))
randMatrix = matrix(rnorm(900 , 0 , 1) ,c(30,30))
i = sample(2:29 , 1)
j = sample(2:29 , 1)
randMatrix[(i-1):(i+1) , (j-1):(j+1)] = randMatrix[(i-1):(i+1) , (j-1):(j+1)]+ matrix(rnorm(9 , 2 , 1) ,c(3,3))
image(randMatrix)
randMatrix[(i-1):(i+1) , (j-1):(j+1)] = randMatrix[(i-1):(i+1) , (j-1):(j+1)]+ matrix(rnorm(9 , 3 , 1) ,c(3,3))
randMatrix = matrix(rnorm(900 , 0 , 1) ,c(30,30))
i = sample(2:29 , 1)
j = sample(2:29 , 1)
randMatrix[(i-1):(i+1) , (j-1):(j+1)] = randMatrix[(i-1):(i+1) , (j-1):(j+1)]+ matrix(rnorm(9 , 3 , 1) ,c(3,3))
image(randMatrix)
rm(list=ls())
?rnorm
randMatrix = matrix(rnorm(900 , 0 , 1) ,c(30,30))
i = sample(2:29 , 1)
j = sample(2:29 , 1)
randMatrix[(i-1):(i+1) , (j-1):(j+1)] = randMatrix[(i-1):(i+1) , (j-1):(j+1)]+ matrix(rnorm(9 , 8 , 1) ,c(3,3))
image(randMatrix)
rm(list=ls())
?rnorm
randMatrix = matrix(rnorm(900 , 0 , 1) ,c(30,30))
i = sample(2:29 , 1)
j = sample(2:29 , 1)
randMatrix[(i-1):(i+1) , (j-1):(j+1)] = randMatrix[(i-1):(i+1) , (j-1):(j+1)]+ matrix(rnorm(9 , 5 , 1) ,c(3,3))
image(randMatrix)
rm(list=ls())
?rnorm
randMatrix = matrix(rnorm(900 , 0 , 1) ,c(30,30))
i = sample(2:29 , 1)
j = sample(2:29 , 1)
randMatrix[(i-1):(i+1) , (j-1):(j+1)] = randMatrix[(i-1):(i+1) , (j-1):(j+1)]+ matrix(rnorm(9 , 3 , 1) ,c(3,3))
image(randMatrix)
?image
image(randMatrix , col = "gray")
image(randMatrix , col = "b")
image(randMatrix , col = "r")
image(randMatrix , col = ".r")
image(randMatrix ,col  = gray((0:32)/32))
33*33
33*33
randMatrix = matrix(rnorm(34*34 , 0 , 1) ,c(34,34))
i = sample(3:32 , 1)
j = sample(3:32 , 1)
randMatrix[(i-2):(i+2) , (j-2):(j+2)] = randMatrix[(i-2):(i+2) , (j-2):(j+2)]+ matrix(rnorm(25 , 3 , 1) ,c(5,5))
image(randMatrix ,col  = gray((0:32)/32))
randMatrix = matrix(rnorm(34*34 , 0 , 1) ,c(34,34))
i = sample(3:32 , 1)
j = sample(3:32 , 1)
randMatrix[(i-2):(i+2) , (j-2):(j+2)] = randMatrix[(i-2):(i+2) , (j-2):(j+2)]+ matrix(rnorm(25 , 3 , 1) ,c(5,5))
image(randMatrix ,col  = gray((0:32)/32))
randMatrix = matrix(rnorm(34*34 , 0 , 1) ,c(34,34))
i = sample(3:32 , 1)
j = sample(3:32 , 1)
randMatrix[(i-2):(i+2) , (j-2):(j+2)] = randMatrix[(i-2):(i+2) , (j-2):(j+2)]+ matrix(rnorm(25 , 3 , 1) ,c(5,5))
image(randMatrix ,col  = gray((0:32)/32))
randMatrix = matrix(rnorm(34*34 , 0 , 1) ,c(34,34))
i = sample(3:32 , 1)
j = sample(3:32 , 1)
randMatrix[(i-2):(i+2) , (j-2):(j+2)] = randMatrix[(i-2):(i+2) , (j-2):(j+2)]+ matrix(rnorm(25 , 3 , 1) ,c(5,5))
image(randMatrix ,col  = gray((0:32)/32))
randMatrix = randMatrix[c(-1,-2,-33,-34),c(-1,-2,-33,-34)]
image(randMatrix ,col  = gray((0:32)/32))
randMatrix = matrix(rnorm(34*34 , 0 , 1) ,c(34,34))
i = sample(3:32 , 1)
j = sample(3:32 , 1)
randMatrix[(i-2):(i+2) , (j-2):(j+2)] = randMatrix[(i-2):(i+2) , (j-2):(j+2)]+ matrix(rnorm(25 , 3 , 1) ,c(5,5))
randMatrix = randMatrix[c(-1,-2,-33,-34),c(-1,-2,-33,-34)]
image(randMatrix ,col  = gray((0:32)/32))
randMatrix = matrix(rnorm(34*34 , 0 , 1) ,c(34,34))
i = sample(3:32 , 1)
j = sample(3:32 , 1)
randMatrix[(i-2):(i+2) , (j-2):(j+2)] = randMatrix[(i-2):(i+2) , (j-2):(j+2)]+ matrix(rnorm(25 , 3 , 1) ,c(5,5))
randMatrix = randMatrix[c(-1,-2,-33,-34),c(-1,-2,-33,-34)]
image(randMatrix ,col  = gray((0:32)/32))
randMatrix = matrix(rnorm(34*34 , 0 , 1) ,c(34,34))
i = sample(3:32 , 1)
j = sample(3:32 , 1)
randMatrix[(i-2):(i+2) , (j-2):(j+2)] = randMatrix[(i-2):(i+2) , (j-2):(j+2)]+ matrix(rnorm(25 , 3 , 1) ,c(5,5))
randMatrix = randMatrix[c(-1,-2,-33,-34),c(-1,-2,-33,-34)]
image(randMatrix ,col  = gray((0:32)/32))
randMatrix = matrix(rnorm(34*34 , 0 , 1) ,c(34,34))
i = sample(3:32 , 1)
j = sample(3:32 , 1)
randMatrix[(i-2):(i+2) , (j-2):(j+2)] = randMatrix[(i-2):(i+2) , (j-2):(j+2)]+ matrix(rnorm(25 , 3 , 1) ,c(5,5))
randMatrix = randMatrix[c(-1,-2,-33,-34),c(-1,-2,-33,-34)]
image(randMatrix ,col  = gray((0:32)/32))
m = mean(randMatrix)
sd = sd(randMAtrix)
?sd
randMAtrix
sd = sd(randMatrix)
randMatrix = matrix(rnorm(34*34 , 0 , 1) ,c(34,34))
m = mean(randMatrix)
sd = sd(randMatrix)
m = mean(randMatrix)
i = sample(3:32 , 1)
j = sample(3:32 , 1)
randMatrix[(i-2):(i+2) , (j-2):(j+2)] = randMatrix[(i-2):(i+2) , (j-2):(j+2)]+ matrix(rnorm(25 , 3 , 1) ,c(5,5))
randMatrix = randMatrix[c(-1,-2,-33,-34),c(-1,-2,-33,-34)]
image(randMatrix ,col  = gray((0:32)/32))
m = mean(randMatrix)
sd = sd(randMatrix)
randMatrix = (randMatrix-m)/sd
m = mean(randMatrix)
sd = sd(randMatrix)
image(randMatrix ,col  = gray((0:32)/32))
randMatrix = matrix(rnorm(34*34 , 0 , 1) ,c(34,34))
i = sample(3:32 , 1)
j = sample(3:32 , 1)
randMatrix[(i-2):(i+2) , (j-2):(j+2)] = randMatrix[(i-2):(i+2) , (j-2):(j+2)]+ matrix(rnorm(25 , 3 , 1) ,c(5,5))
randMatrix = randMatrix[c(-1,-2,-33,-34),c(-1,-2,-33,-34)]
image(randMatrix ,col  = gray((0:32)/32))
m = mean(randMatrix)
sd = sd(randMatrix)
randMatrix = (randMatrix-m)/sd
image(randMatrix ,col  = gray((0:32)/32))
order(randMAtrix)
order(randMatrix)
dim(order(randMatrix))
X = matrix(order(randMatrix) ,c(30,30))
View(X)
randMatrix = matrix(rnorm(34*34 , 0 , 1) ,c(34,34))
i = sample(3:32 , 1)
j = sample(3:32 , 1)
randMatrix[(i-2):(i+2) , (j-2):(j+2)] = randMatrix[(i-2):(i+2) , (j-2):(j+2)]+ matrix(rnorm(25 , 8 , 1) ,c(5,5))
randMatrix = randMatrix[c(-1,-2,-33,-34),c(-1,-2,-33,-34)]
image(randMatrix ,col  = gray((0:32)/32))
m = mean(randMatrix)
X = matrix(order(randMatrix) ,c(30,30))
View(X)
X = X[X<30]==0
View(X)
randMatrix = matrix(rnorm(34*34 , 0 , 1) ,c(34,34))
i = sample(3:32 , 1)
j = sample(3:32 , 1)
randMatrix[(i-2):(i+2) , (j-2):(j+2)] = randMatrix[(i-2):(i+2) , (j-2):(j+2)]+ matrix(rnorm(25 , 8 , 1) ,c(5,5))
randMatrix = randMatrix[c(-1,-2,-33,-34),c(-1,-2,-33,-34)]
X = matrix(order(randMatrix) ,c(30,30))
View(X)
X= X[X>30] = 0
View(X)
X = matrix(order(randMatrix) ,c(30,30))
X[X>30] = 0
View(X)
X = matrix(order(randMatrix) ,c(30,30))
X[X<880] = 0
View(X)
library(ISLR)
attach(Wage)
rm(list=ls())
library(ISLR)
attach(Wage)
attach(Wage)
attach(Wage)
library(ISLR)
attach(Wage)
fit=lm(wage~poly(age,4),data=Wage)
fix(Wage)
fit=lm(wage~poly(age,4),data=Wage)
coef(summary(fit))
fit2=lm(wage~poly(age,4,raw=T),data=Wage)
coef(summary(fit2))
fit2a=lm(wage~age+I(age^2)+I(age^3)+I(age^4),data=Wage)
coef(fit2a)
fit2b=lm(wage~cbind(age,age^2,age^3,age^4),data=Wage)
agelims=range(age)
age.grid=seq(from=agelims[1],to=agelims[2])
preds=predict(fit,newdata=list(age=age.grid),se=TRUE)
se.bands=cbind(preds$fit+2*preds$se.fit,preds$fit-2*preds$se.fit)
par(mfrow=c(1,2),mar=c(4.5,4.5,1,1),oma=c(0,0,4,0))
plot(age,wage,xlim=agelims,cex=.5,col="darkgrey")
title("Degree-4 Polynomial",outer=T)
lines(age.grid,preds$fit,lwd=2,col="blue")
matlines(age.grid,se.bands,lwd=1,col="blue",lty=3)
preds2=predict(fit2,newdata=list(age=age.grid),se=TRUE)
max(abs(preds$fit-preds2$fit))
fit.1=lm(wage~age,data=Wage)
fit.2=lm(wage~poly(age,2),data=Wage)
fit.3=lm(wage~poly(age,3),data=Wage)
fit.4=lm(wage~poly(age,4),data=Wage)
fit.5=lm(wage~poly(age,5),data=Wage)
anova(fit.1,fit.2,fit.3,fit.4,fit.5)
anova(fit.1,fit.2,fit.3,fit.4,fit.5)
coef(summary(fit.5))
(-11.983)^2
fit.1=lm(wage~education+age,data=Wage)
fit.2=lm(wage~education+poly(age,2),data=Wage)
fit.3=lm(wage~education+poly(age,3),data=Wage)
anova(fit.1,fit.2,fit.3)
fit=glm(I(wage>250)~poly(age,4),data=Wage,family=binomial)
preds=predict(fit,newdata=list(age=age.grid),se=T)
pfit=exp(preds$fit)/(1+exp(preds$fit))
se.bands.logit = cbind(preds$fit+2*preds$se.fit, preds$fit-2*preds$se.fit)
se.bands = exp(se.bands.logit)/(1+exp(se.bands.logit))
preds=predict(fit,newdata=list(age=age.grid),type="response",se=T)
plot(age,I(wage>250),xlim=agelims,type="n",ylim=c(0,.2))
points(jitter(age), I((wage>250)/5),cex=.5,pch="|",col="darkgrey")
lines(age.grid,pfit,lwd=2, col="blue")
matlines(age.grid,se.bands,lwd=1,col="blue",lty=3)
table(cut(age,4))
fit=lm(wage~cut(age,4),data=Wage)
coef(summary(fit))
D=function(p){
X=matrix(runif(p*1000,-1,1),nrow=p,ncol=1000)
d=sqrt(diag(t(X)%*%X))
D=sort(d)[100]
}
p=3
a=D(p)
a
?curve
plot(qnorm)
plot(pnorm)
plot(pnorm , -10 , 10)
plot(dnorm , -10 , 10)
plot(qnorm(dt(100)))
plot(qnorm(dt(df = 100)))
function t100(x){
df(x)
}
function t100(x){
function myT(x){
function arrfg(x){
t100 = function(x){
df(x)
}
plot(qnorm(t100))
plot(qnorm(t100()))
plot(qnorm)
plot(dt())
plot(qt())
plot(function(x) dt(x, df = 3, ncp = 2), -3, 11, ylim = c(0, 0.32),
main = "Non-central t - Density", yaxs = "i")
plot(function(x) dt(x, df = 100, ncp = 2), -3, 11, ylim = c(0, 0.32),
main = "Non-central t - Density", yaxs = "i")
plot(function(x) dt(x, df = 100), -3, 11, ylim = c(0, 0.32),
main = "Non-central t - Density", yaxs = "i")
plot(function(x) dt(x, df = 100), )
plot(function(x) dt(x, df = 100), -3, 11, ylim = c(0, 0.32),
plot(function(x) dt(x, df = 100), -3, 11, ylim = c(0, 0.32),
main = "Non-central t - Density", yaxs = "i")
plot(function(x) dt(x, df = 100), -3, 11, ylim = c(0, 0.32),
main = "Non-central t - Density", yaxs = "i")
ncp = 2
ncp = 2
plot(function(x) dt(x, df = 100, ncp = 2), -3, 11, ylim = c(0, 0.32),
main = "Non-central t - Density", yaxs = "i")
1 - pt(1:5, df = 1)
qt(.975, df = c(1:10,20,50,100,1000))
tt <- seq(0, 10, len = 21)
ncp <- seq(0, 6, len = 31)
ptn <- outer(tt, ncp, function(t, d) pt(t, df = 3, ncp = d))
t.tit <- "Non-central t - Probabilities"
image(tt, ncp, ptn, zlim = c(0,1), main = t.tit)
persp(tt, ncp, ptn, zlim = 0:1, r = 2, phi = 20, theta = 200, main = t.tit,
xlab = "t", ylab = "non-centrality parameter",
zlab = "Pr(T <= t)")
plot(function(x) dt(x, df = 3, ncp = 2), -3, 11, ylim = c(0, 0.32),
main = "Non-central t - Density", yaxs = "i")
plot(function(x) dt(x, df = 3), -3, 11, ylim = c(0, 0.32),
main = "Non-central t - Density", yaxs = "i")
plot(function(x) dt(x, df = 3), -4, 4, ylim = c(0, 0.5),
main = "Non-central t - Density", yaxs = "i")
plot(function(x) qt(x, df = 3), -4, 4, ylim = c(0, 0.5),
main = "Non-central t - Density", yaxs = "i")
plot(function(x) pt(x, df = 3), -4, 4, ylim = c(0, 0.5),
install.packages("pls")
library(FDRreg)
install.packages("FDRreg")
rm(list = ls())
data(pvalues)
library("fdrtool")
data(pvalues)
fdr = fdrtool(pvalues, statistic="pvalue")
fdr$qval # estimated Fdr values
fdr$lfdr # estimated local fdr
fdr = fdrtool(pvalues, statistic="pvalue", color.figure=FALSE)
sd.true = 2.232
n = 500
z = rnorm(n, sd=sd.true)
z = c(z, runif(30, 5, 10)) # add some contamination
fdr = fdrtool(z)
fdr = fdrtool(z, cutoff.method="pct0", pct0=0.9)
sd.true = 2.232
n = 500
z = rnorm(n, sd=sd.true)
sd.true = 2.232
n = 5000
z = rnorm(n, sd=sd.true)
censored.fit(z, c(2,3,5), statistic="normal")
library("FDRreg", lib.loc="~/R/win-library/3.1")
Examples
library(FDRreg)
P = 2
N = 10000
betatrue = c(-3.5,rep(1/sqrt(P), P))
rm(list = ls())
P = 2
N = 10000
betatrue = c(-3.5,rep(1/sqrt(P), P))
View(betatrue)
X = matrix(rnorm(N*P), N,P)
?crossprod
z <- crossprod(1:4)
z
z <- crossprod(1:2)
z
psi = crossprod(t(cbind(1,X)), betatrue)
wsuccess = 1/{1+exp(-psi)}
gammatrue = rbinom(N,1,wsuccess)
FDRreg 3
table(gammatrue)
thetatrue = rnorm(N,3,0.5)
thetatrue[gammatrue==0] = 0
z = rnorm(N, thetatrue, 1)
hist(z, 100, prob=TRUE, col='lightblue', border=NA)
curve(dnorm(x,0,1), add=TRUE, n=1001)
fdr1 <- FDRreg(z, covars=X, nmc=2500, nburn=100, nmids=120, nulltype='theoretical')
library(FDRreg)
fdr1 <- FDRreg(z, covars=X, nmc=2500, nburn=100, nmids=120, nulltype='theoretical')
library(FDRreg)
library("FDRreg")
FDRreg 3
?FDRreg
??FDRreg
install.packages("FDRreg")
library(FDRreg)
P = 2
N = 10000
betatrue = c(-3.5,rep(1/sqrt(P), P))
View(betatrue)
X = matrix(rnorm(N*P), N,P)
psi = crossprod(t(cbind(1,X)), betatrue)
wsuccess = 1/{1+exp(-psi)}
gammatrue = rbinom(N,1,wsuccess)
table(gammatrue)
thetatrue = rnorm(N,3,0.5)
thetatrue[gammatrue==0] = 0
z = rnorm(N, thetatrue, 1)
hist(z, 100, prob=TRUE, col='lightblue', border=NA)
curve(dnorm(x,0,1), add=TRUE, n=1001)
fdr1 <- FDRreg(z, covars=X, nmc=2500, nburn=100, nmids=120, nulltype='theoretical')
Q = 0.1
plotFDR(fdr1, Q=Q, showfz=TRUE)
hist(fdr1$betasave[,1], 20)
plot(wsuccess, fdr1$priorprob)
plot(X[,1], log(fdr1$priorprob/{1-fdr1$priorprob}), ylab='Logit of prior probability')
plot(X[,2], log(fdr1$priorprob/{1-fdr1$priorprob}), ylab='Logit of prior probability')
plot(z, fdr1$localfdr, ylab='Local false-discovery rate')
myfindings = which(fdr1$FDR <= Q)
install.packages("KernSmooth")
library("KernSmooth", lib.loc="~/R/win-library/3.1")
library(datasets)
data(iris)
rm(list = ls())
library(datasets)
data(iris)
?iris
summary(iris)
names(iris)
Species == "virginica"
attach(iris)
names(iris)
Species == "virginica"
mean(iris[Species == "virginica"])
Species == "virginica"
iris[Species == "virginica"]
mean(as.matrix(iris)[Species == "virginica"])
m = as.matrix(iris)
names(iris)
mean(iris$Sepal.Length[Species == "virginica"])
colMeans(iris)
apply(iris, 1, mean)
names(iris)
apply(iris[, 1:4], 2, mean)
summary(iris)
class(iris[,1:4])
apply(iris, 2, mean)
apply(iris[,1:5], 2, mean)
apply(iris[,1:4], 2, mean)
library(datasets)
data(mtcars)
library(datasets)
data(mtcars)
?mtcars
names(mtcars)
lapply
?lapply
?tapply
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
debug(ls)
ls
rm(list=ls())
install.packages("SMPracticals")
library("SMPracticals", lib.loc="~/R/win-library/3.1")
detach("package:SMPracticals", unload=TRUE)
rm(list=ls())
?download.file
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv" ,destfile = "data1.csv" )
MyData <- read.csv("getdata_data_ss06hid.csv")
MyData <- read.csv("getdata_data_ss06hid.csv")
MyData <- read.csv2("getdata_data_ss06hid.csv")
MyData <- read.csv2("getdata_data_ss06hid.csv")
getwd()
setwd("C:/Users/Arman/Dropbox/My courses/Getting and cleaning Data")
MyData <- read.csv("getdata_data_ss06hid.csv")
names(MyData)
View(MyData)
values <- MyData$VAL
sum(values==24)
is.na(values)
sum(values[!is.na(values)]==24)
names(MyData)
MyData.FES <- MyData$FES
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx" , destfile = "getdata_data_DATA.gov_NGAP.xlsx" , method = "curl")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx" , destfile = "getdata_data_DATA.gov_NGAP.xlsx" , method = "curl")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx" , destfile = "getdata_data_DATA.gov_NGAP.xlsx" )
dat <- read.xlsx("getdata_data_DATA.gov_NGAP.xlsx" , rowIndex= 18:23 , colIndex=7:15)
install.packages("xlsx")
library("xlsx", lib.loc="~/R/win-library/3.1")
dat <- read.xlsx("getdata_data_DATA.gov_NGAP.xlsx" , rowIndex= 18:23 , colIndex=7:15)
dat <- read.xlsx("getdata_data_DATA.gov_NGAP.xlsx" ,sheetIndex = 1, rowIndex= 18:23 , colIndex=7:15)
dat <- read.xlsx("getdata_data_DATA.gov_NGAP.xlsx" ,sheetIndex = 1)
?read.xlsx
dat <- read.xlsx("getdata_data_DATA.gov_NGAP.xlsx" ,sheetIndex = 1, rowIndex= 18:23 , colIndex=7:15 , header = T)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx" , destfile = "getdata_data_DATA.gov_NGAP.xlsx" )
dat <- read.xlsx("getdata_data_DATA.gov_NGAP.xlsx" ,sheetIndex = 1, rowIndex= 18:23 , colIndex=7:15 , header = T)
dat <- read.xlsx("getdata_data_DATA.gov_NGAP2.xlsx" ,sheetIndex = 1, rowIndex= 18:23 , colIndex=7:15 , header = T)
sum(dat$Zip*dat$Ext,na.rm=T)
https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml " , destfile = "getdata_data_restaurants.xlsx" )
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml " , destfile = "getdata_data_restaurants.xlsx" )
install.packages("XML")
library(XML)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml " , destfile = "getdata_data_restaurants.xml" )
doc <- xmlTreeParse("getdata_data_restaurants.xml" , useInternal = T)
rootNode <- xmlroot(doc)
rootNode <- xmlRoot(doc)
xmlNames(rootNode)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
xpathSApply(rootNode , "//zipcode" , xmlValue)
sum(xpathSApply(rootNode , "//zipcode" , xmlValue))
length(xpathSApply(rootNode , "//zipcode" , xmlValue))
?as.integer
zipcode <-as.integer(xpathSApply(rootNode , "//zipcode" , xmlValue))
sum(zipcode==21231)
